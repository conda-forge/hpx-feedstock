diff --git a/libs/core/datastructures/include/hpx/datastructures/detail/optional.hpp b/libs/core/datastructures/include/hpx/datastructures/detail/optional.hpp
index 98faa50275..ac0cca4650 100644
--- a/libs/core/datastructures/include/hpx/datastructures/detail/optional.hpp
+++ b/libs/core/datastructures/include/hpx/datastructures/detail/optional.hpp
@@ -347,7 +347,7 @@ namespace hpx::optional_ns {
                 std::destroy_at(reinterpret_cast<T*>(&storage_));
                 empty_ = true;
             }
-            std::construct_at(reinterpret_cast<T*>(&storage_),
+            hpx::construct_at(reinterpret_cast<T*>(&storage_),
                 HPX_FORWARD(F, f)(HPX_FORWARD(Ts, ts)...));
             empty_ = false;
         }
diff --git a/libs/core/schedulers/include/hpx/schedulers/background_scheduler.hpp b/libs/core/schedulers/include/hpx/schedulers/background_scheduler.hpp
index 01f12dc38d..4e49f60dcf 100644
--- a/libs/core/schedulers/include/hpx/schedulers/background_scheduler.hpp
+++ b/libs/core/schedulers/include/hpx/schedulers/background_scheduler.hpp
@@ -69,9 +69,10 @@ namespace hpx::threads::policies {
             // needs to enable background work
             mode = scheduler_mode(mode & ~scheduler_mode::enable_stealing);
             mode = scheduler_mode(mode & ~scheduler_mode::enable_stealing_numa);
-            mode = scheduler_mode(mode | ~scheduler_mode::do_background_work);
-            mode =
-                scheduler_mode(mode | ~scheduler_mode::do_background_work_only);
+            mode = scheduler_mode(
+                mode | scheduler_mode(~scheduler_mode::do_background_work));
+            mode = scheduler_mode(mode |
+                scheduler_mode(~scheduler_mode::do_background_work_only));
             scheduler_base::set_scheduler_mode(mode);
         }
 
