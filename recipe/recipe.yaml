# yaml-language-server: $schema=https://raw.githubusercontent.com/prefix-dev/recipe-format/main/schema.json
schema_version: 1

context:
  name: hpx
  version: 1.11.0
  build_number: 11

recipe:
  name: ${{ name }}
  version: ${{ version }}

source:
  url: https://github.com/STEllAR-GROUP/hpx/archive/refs/tags/v${{ version }}.tar.gz
  sha256: 01ec47228a2253b41e318bb09c83325a75021eb6ef3262400fbda30ac7389279

build:
  string: ${{ malloc }}_${{ hash }}_${{ build_number }}
  number: ${{ build_number }}
  variant:
    use_keys:
      # use malloc from the variant config, e.g. to build multiple malloc variants
      - malloc
    # this will down-prioritize the system variant versus other variants of the package
    down_prioritize_variant: ${{ 1 if malloc == "system" else 0 }}


outputs:
  - package:
      name: ${{ name }}
      version: ${{ version }}
    build:
      script:
        file: ${{ "build.sh" if unix else "build.bat" }}
        env:
          malloc: ${{ malloc }}
    requirements:
      build:
        - ${{ compiler('cxx') }}
        - ${{ stdlib("c") }}
        - cmake
        - python *
        - if: win
          then: git
          else: ninja
      host:
        - asio
        - libboost-devel
        - if: not win
          then: gperftools
        - libhwloc
        - if: win
          then: mimalloc
      run:
        # Packages needed for downstream packages that use HPX at:
        # - build-time: headers, libraries
        # - runtime: shared libraries
        # Only list packages whose meta.yaml doesn't contain a run_exports already
        - asio
        - libboost-devel
        - if: not win
          then: gperftools
      run_exports:
        weak:
          - ${{ pin_subpackage("hpx", upper_bound="x.x") }}

    tests:
      - files:
          recipe:
            - test/CMakeLists.txt
            - test/hello_hpx.cpp
        requirements:
          run:
            - ${{ compiler('cxx') }}
            - ${{ stdlib("c") }}
            - cmake
            - if: not win
              then: ninja
        script:
          - if: win
            then:
              - run_test.bat
            else:
              - run_test.sh
      - package_contents:
          files:
              - if: win
                then:
                    - Library/bin/hpxrun.py
                else:
                    - bin/hpxrun.py

about:
  summary: The C++ Standard Library for Parallelism and Concurrency
  description: |
    HPX is a C++ Standard Library for Concurrency and Parallelism. It implements all of the
    corresponding facilities as defined by the C++ Standard. Additionally, in HPX we implement
    functionalities proposed as part of the ongoing C++ standardization process. We also extend
    the C++ Standard APIs to the distributed case.
  license: BSL-1.0
  license_file: LICENSE_1_0.txt
  homepage: https://github.com/STEllAR-GROUP/hpx
  repository: https://github.com/STEllAR-GROUP/hpx
  documentation: https://hpx.stellar-group.org/documentation

extra:
  recipe-maintainers:
    - kordejong
    - oliverschmitz
    - hkaiser
